/**
 * @file
 * This module sets up the image and thumbnail upload handling using Multer.
 * It provides two main methods: uploadImage and generateAndUploadThumbnail.
 * The unique filenames are generated by combining the original filename
 * and a timestamp to avoid duplicity.
 *
 * @author Jacob G, Cesar H
 */

const path = require('path');
const multer = require('multer');
const sharp = require('sharp');

/**
 * Construct filenames with timestamps from original names.
 * @param {string} originalName - The filename that needs to be changed.
 * @param {string} timestamp - The timestamp that gets added to the filename.
 * @returns {Object} The names for the timestamped image and its thumbnail.
 */
function getTimestampedFileNames(originalName, timestamp) {
    const fileExtension = originalName.split('.').pop();
    const fileBasename = originalName.slice(0, originalName.lastIndexOf('.'));
    const timestampedImageName = `${fileBasename}_${timestamp}.${fileExtension}`;
    const timestampedThumbnailName = `${fileBasename}_${timestamp}_thumbnail.${fileExtension}`;

    return { timestampedImageName, timestampedThumbnailName };
}

/**
 * Multer disk storage configuration for handling image uploads.
 * Destination is set to the public/img/items directory and filenames are timestamped.
 *
 * @type {DiskStorage}
 */
const imageStorage = multer.diskStorage({
    // Set the destination for the image
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, '..', 'public', 'img', 'items'));
    },
    filename: (req, file, cb) => {
        // Generate a timestamp
        const timestamp = new Date().toISOString().replace(/:/g, '_').slice(0, 19);

        // Get the timestamped names for the image and thumbnail
        const { timestampedImageName, timestampedThumbnailName } = getTimestampedFileNames(file.originalname, timestamp);

        // Set the paths for the image and thumbnail
        const imagePathForDb = 'img/items/' + timestampedImageName;
        const thumbnailPathForDb = 'img/thumbnails/' + timestampedThumbnailName;

        // Set the paths in the request body to use to store paths in the database
        req.body = {
            ...req.body,
            imagePathForDb,
            thumbnailPathForDb,
            timestampedThumbnailName // Used in the thumbnail storage configuration
        };

        cb(null, timestampedImageName);
    }
});

// Generate a thumbnail for an image
async function generateAndUploadThumbnail(sourceImagePath, targetImagePath) {
    const thumbnailWidth = 200;
    const thumbnailHeight = 200;

    try {
        await sharp(sourceImagePath)
            .resize(thumbnailWidth, thumbnailHeight)
            .toFile(targetImagePath);
        console.log('Thumbnail generated successfully at', targetImagePath);
    } catch (error) {
        console.error('Error generating thumbnail:', error);
        throw new Error('Failed to generate thumbnail');
    }
}

/**
 * Initialize Multer with storage options for images.
 * @type {multer} uploadImage - The Multer instance for images.
 */
const uploadImage = multer({ storage: imageStorage });


module.exports = { uploadImage, generateAndUploadThumbnail: generateAndUploadThumbnail };
